{"remainingRequest":"C:\\Users\\Michael\\VSCodeProjects\\mern-stack-starter-pack\\node_modules\\babel-loader\\lib\\index.js??ref--4-1!C:\\Users\\Michael\\VSCodeProjects\\mern-stack-starter-pack\\node_modules\\eslint-loader\\index.js!C:\\Users\\Michael\\VSCodeProjects\\mern-stack-starter-pack\\webpack.config.js","dependencies":[{"path":"C:\\Users\\Michael\\VSCodeProjects\\mern-stack-starter-pack\\webpack.config.js","mtime":1544306740305},{"path":"C:\\Users\\Michael\\VSCodeProjects\\mern-stack-starter-pack\\.babelrc","mtime":1544156724433},{"path":"C:\\Users\\Michael\\VSCodeProjects\\mern-stack-starter-pack\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Michael\\VSCodeProjects\\mern-stack-starter-pack\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Michael\\VSCodeProjects\\mern-stack-starter-pack\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nvar Webpack = require('webpack');\n\nvar path = require('path');\n\nvar nodeExternals = require('webpack-node-externals');\n\nvar MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nvar CleanWebpackPlugin = require('clean-webpack-plugin');\n\nvar NodemonPlugin = require('nodemon-webpack-plugin');\n\nvar backend = {\n  mode: 'development',\n  // change it during production\n  target: 'node',\n  externals: [nodeExternals()],\n  // in order to ignore all modules in node_modules folder\n  node: {\n    console: true,\n    global: true,\n    process: true,\n    __filename: false,\n    __dirname: 'mock',\n    Buffer: true,\n    setImmediate: true // See \"Other node core libraries\" for additional options.\n\n  },\n  performance: {\n    hints: 'warning',\n    maxAssetSize: 4000000,\n    // int (in bytes),\n    maxEntrypointSize: 4000000,\n    // int (in bytes)\n    assetFilter: function assetFilter(assetFilename) {\n      // Function predicate that provides asset filenames\n      return assetFilename.endsWith('.js');\n    }\n  },\n  devtool: 'cheap-eval-source-map',\n  // source-map | eval-source-map | cheap-eval-source-map\n  resolve: {\n    // Add `.ts`, `.jsx`, '.js' and '.es6' as a resolvable extension.\n    extensions: ['.js', '.jsx', '.es6']\n  },\n  entry: {\n    server: ['core-js/modules/es6.promise', 'core-js/modules/es6.array.iterator', './src/backend/Server.js']\n  },\n  output: {\n    filename: '[name].build.js',\n    path: path.resolve(__dirname, 'dist/backend'),\n    publicPath: './'\n  },\n  watch: true,\n  watchOptions: {\n    aggregateTimeout: 300,\n    poll: 1000,\n    ignored: /node_modules/\n  },\n  devServer: {\n    contentBase: path.join(__dirname, 'dist'),\n    watchContentBase: true,\n    compress: true,\n    port: 4200,\n    watchOptions: {\n      poll: true\n    },\n    stats: 'errors-only'\n  },\n  plugins: [new CleanWebpackPlugin(['dist/backend'], {\n    // options\n    verbose: true,\n    dry: false\n  }),\n  /**\r\n   * MiniCssExtractPlugin extracts CSS into separate files. It creates a CSS file per JS\r\n   * file which contains CSS. It supports On-Demand-Loading of CSS and SourceMaps.\r\n   */\n  new MiniCssExtractPlugin({\n    // Options similar to the same options in webpackOptions.output\n    // both options are optional\n    filename: '[name].css',\n    chunkFilename: '[id].css'\n  }), new Webpack.DefinePlugin({\n    'process.env.NODE_ENV': JSON.stringify('development'),\n    __isBrowser__: false\n  }), new NodemonPlugin({\n    args: ['development'],\n    // What to watch.\n    watch: path.resolve(__dirname, 'dist'),\n    // ouput file\n    script: './dist/backend/server.build.js',\n    // Extensions to watch\n    ext: 'js',\n    // Detailed log.\n    verbose: true\n  }),\n  /** HMR allows all kinds of modules to be updated at runtime without the need for a full\r\n   * refresh.\r\n   ** HMR is not intended for use in production.\r\n   */\n  new Webpack.HotModuleReplacementPlugin({\n    // Options...\n    title: 'server: Hot Module Replacement...'\n  })],\n  module: {\n    rules: [// .js and .jsx rule\n    {\n      test: /\\.(js|jsx)?$/,\n      use: ['cache-loader', {\n        loader: 'babel-loader',\n        options: {\n          presets: ['@babel/preset-env', '@babel/preset-flow', '@babel/preset-react'],\n          plugins: ['@babel/plugin-transform-runtime', ['@babel/plugin-proposal-class-properties', {\n            loose: true\n          }], 'react-hot-loader/babel']\n        }\n      }, 'eslint-loader'],\n      exclude: [path.resolve(__dirname, 'node_modules'), path.resolve(__dirname, 'dist')],\n      enforce: 'pre'\n    }, // css loader: This enables you to import './style.css' into the file that depends on that styling.\n    {\n      test: /\\.css$/,\n      use: ['style-loader', 'css-loader']\n    }, // scss/sass\n    {\n      test: /\\.scss$/,\n      use: ['style-loader', // creates style nodes from JS strings\n      'css-loader', // translates CSS into CommonJS\n      // compiles Sass to CSS, using Node Sass by default\n      {\n        loader: 'sass-loader',\n        options: {\n          // You can also pass options directly to Node Sass\n          includePaths: ['./node_modules/node-sass'],\n          implementation: require('node-sass')\n        }\n      }]\n    }, // url loader: A loader for webpack which transforms files into base64 URIs.\n    {\n      test: /\\.(png|jpg|gif|svg|eot|ttf|woff|woff2)$/,\n      loader: 'url-loader',\n      options: {\n        limit: 8000,\n        fallback: 'file-loader'\n      }\n    }]\n  }\n};\nvar frontend = {\n  mode: 'development',\n  // change it during production\n  target: 'web',\n  performance: {\n    hints: 'warning',\n    maxAssetSize: 4000000,\n    // int (in bytes),\n    maxEntrypointSize: 4000000,\n    // int (in bytes)\n    assetFilter: function assetFilter(assetFilename) {\n      // Function predicate that provides asset filenames\n      return assetFilename.endsWith('.css') || assetFilename.endsWith('.js');\n    }\n  },\n  devtool: 'cheap-eval-source-map',\n  // source-map | eval-source-map | cheap-eval-source-map\n  resolve: {\n    // Add `.ts`, `.jsx`, '.js' and '.es6' as a resolvable extension.\n    extensions: ['.js', '.jsx']\n  },\n  entry: {\n    client: ['core-js/modules/es6.promise', 'core-js/modules/es6.array.iterator', './src/frontend/Client.js']\n  },\n  output: {\n    filename: '[name].build.js',\n    path: path.resolve(__dirname, 'dist/frontend'),\n    publicPath: '/'\n  },\n  watch: true,\n  watchOptions: {\n    aggregateTimeout: 300,\n    poll: 1000,\n    ignored: /node_modules/\n  },\n  devServer: {\n    contentBase: path.join(__dirname, 'dist'),\n    watchContentBase: true,\n    compress: true,\n    port: 4200,\n    watchOptions: {\n      poll: true\n    },\n    stats: 'errors-only'\n  },\n  // stats normal is standard output\n  // stats minimal will output when errors or new compilation happen\n  // verbose Output everything\n  // \"errors-only\" Only output when errors happen\n  stats: 'errors-only',\n  plugins: [new CleanWebpackPlugin(['dist/frontend'], {\n    // options\n    verbose: true,\n    dry: false\n  }),\n  /**\r\n   * MiniCssExtractPlugin extracts CSS into separate files. It creates a CSS file per JS\r\n   * file which contains CSS. It supports On-Demand-Loading of CSS and SourceMaps.\r\n   */\n  new MiniCssExtractPlugin({\n    // Options similar to the same options in webpackOptions.output\n    // both options are optional\n    filename: '[name].css',\n    chunkFilename: '[id].css'\n  }), new Webpack.DefinePlugin({\n    'process.env.NODE_ENV': JSON.stringify('development'),\n    __isBrowser__: true\n  }), new NodemonPlugin({\n    args: ['development'],\n    // What to watch.\n    watch: path.resolve(__dirname, 'dist'),\n    // Extensions to watch\n    ext: 'js',\n    // Detailed log.\n    verbose: true\n  }),\n  /** HMR allows all kinds of modules to be updated at runtime without the need for a full\r\n   * refresh.\r\n   ** HMR is not intended for use in production.\r\n   */\n  new Webpack.HotModuleReplacementPlugin({\n    // Options...\n    title: 'Dev: Hot Module Replacement...'\n  })],\n  module: {\n    rules: [// .js and .jsx rule\n    {\n      test: /\\.(js|jsx)?$/,\n      use: ['cache-loader', {\n        loader: 'babel-loader',\n        options: {\n          presets: ['@babel/preset-env', '@babel/preset-flow', '@babel/preset-react'],\n          plugins: ['@babel/plugin-transform-runtime', ['@babel/plugin-proposal-class-properties', {\n            loose: true\n          }], 'react-hot-loader/babel']\n        }\n      }, 'eslint-loader'],\n      exclude: [path.resolve(__dirname, 'node_modules'), path.resolve(__dirname, 'dist')],\n      enforce: 'pre'\n    }, // css loader: This enables you to import './style.css' into the file that depends on that styling.\n    {\n      test: /\\.css$/,\n      use: ['style-loader', 'css-loader']\n    }, // scss/sass\n    {\n      test: /\\.scss$/,\n      use: ['style-loader', // creates style nodes from JS strings\n      'css-loader', // translates CSS into CommonJS\n      // compiles Sass to CSS, using Node Sass by default\n      {\n        loader: 'sass-loader',\n        options: {\n          // You can also pass options directly to Node Sass\n          includePaths: ['./node_modules/node-sass'],\n          implementation: require('node-sass')\n        }\n      }]\n    }, // url loader: A loader for webpack which transforms files into base64 URIs.\n    {\n      test: /\\.(png|jpg|gif|svg|eot|ttf|woff|woff2)$/,\n      loader: 'url-loader',\n      options: {\n        limit: 8000,\n        fallback: 'file-loader'\n      }\n    }]\n  }\n};\nmodule.exports = [backend, frontend];\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(backend, \"backend\", \"C:\\\\Users\\\\Michael\\\\VSCodeProjects\\\\mern-stack-starter-pack\\\\webpack.config.js\");\n  reactHotLoader.register(frontend, \"frontend\", \"C:\\\\Users\\\\Michael\\\\VSCodeProjects\\\\mern-stack-starter-pack\\\\webpack.config.js\");\n  leaveModule(module);\n})();\n\n;",null]}