{"remainingRequest":"C:\\Users\\Michael\\VSCodeProjects\\mern-stack-starter-pack\\node_modules\\babel-loader\\lib\\index.js??ref--4-1!C:\\Users\\Michael\\VSCodeProjects\\mern-stack-starter-pack\\node_modules\\eslint-loader\\index.js!C:\\Users\\Michael\\VSCodeProjects\\mern-stack-starter-pack\\src\\backend\\Server.js","dependencies":[{"path":"C:\\Users\\Michael\\VSCodeProjects\\mern-stack-starter-pack\\src\\backend\\Server.js","mtime":1544305558793},{"path":"C:\\Users\\Michael\\VSCodeProjects\\mern-stack-starter-pack\\.babelrc","mtime":1544156724433},{"path":"C:\\Users\\Michael\\VSCodeProjects\\mern-stack-starter-pack\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Michael\\VSCodeProjects\\mern-stack-starter-pack\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Michael\\VSCodeProjects\\mern-stack-starter-pack\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport express from 'express';\nimport cors from 'cors';\nimport compression from 'compression';\nimport helmet from 'helmet';\nimport path from 'path';\nimport http from 'http';\nimport mongoose from 'mongoose';\nimport { Logger, NormalizePort, ErrorHandler } from './libs/helper';\nimport { MongooseConfiguration } from './libs/mongoose.config'; // import react renderToString, Provider and our store\n\nimport React from 'react';\nimport { renderToString } from 'react-dom/server';\nimport { Provider } from 'react-redux';\nimport store from '../ReduxStateManagement/Store';\nimport Loadable from 'react-loadable';\nimport { StaticRouter } from 'react-router'; // import fronend App\n\nimport App from '../shared/App'; // import template view\n\nimport Template from './TemplateView'; // needed for hmr or hot reloading\n\nimport webpack from 'webpack';\nimport webpackDevMiddleware from 'webpack-dev-middleware';\nimport webpackHotMiddleware from 'webpack-hot-middleware'; // import webpack.config.js\n\nvar config = require('../../webpack.config'); // current dir\n\n\nvar CURRENT_WORKING_DIR = process.cwd(); // dotenv\n\nrequire('dotenv').config(); // express app\n\n\nvar app = express(); // mongoose here...\n\nMongooseConfiguration(mongoose); // webpack compiler\n\nvar compiler = webpack(config); // set middleware\n\napp.enable('trust proxy');\napp.set('port', NormalizePort(process.env.PORT) || 3000);\napp.set('static_files', path.join(CURRENT_WORKING_DIR, 'dist/frontend')); // use middleware\n\napp.use(helmet()); // body parser using express.urlencoded\n\napp.use(express.json());\napp.use(express.urlencoded({\n  extended: true\n}));\napp.use(cors()); // static files\n\napp.use(express.static(app.get('static_files'))); // static files\n// Env\n\nvar isProduction = JSON.stringify(process.env.NODE_ENV) === 'production';\n\nif (isProduction) {\n  app.use(compression());\n  app.get('trust proxy'); // app.use(\n  // \tsession({\n  // \t\tsecret: process.env.SECRET_KEY.toString(),\n  // \t\tname: process.env.SESSION_NAME.toString(),\n  // \t\tsaveUninitialized: true, // create session until something stored\n  // \t\tresave: false, // don't save session if unmodified\n  // \t\tcookie: { maxAge: 300000 } // 60000 milliseconds = 1 minute, 300000 is 5 minutes\n  // \t})\n  // );\n} else {\n  // Hot Module Replacement\n  app.use(webpackDevMiddleware(compiler, {\n    serverSideRender: true,\n    noInfo: true,\n    publicPath: './'\n  }));\n  app.use(webpackHotMiddleware(compiler)); // public directory\n  // log requests\n\n  app.use(Logger());\n} // routes\n\n\napp.get('*', function (req, res, next) {\n  var context = {};\n  var html = renderToString(React.createElement(Provider, {\n    store: store()\n  }, React.createElement(StaticRouter, {\n    location: req.url,\n    context: context\n  }, React.createElement(App, null))));\n  var templateOptions = {\n    title: 'Mern Stack Starter Pack',\n    html: html,\n    store: store(),\n    context: context,\n    res: res\n  };\n  Promise.resolve().then(function () {\n    return res.status(context.statusCode || 200).send(Template(templateOptions));\n  }).catch(function (err) {\n    return next(err);\n  });\n}); // error handling\n\napp.use(ErrorHandler); // server\n\nvar Server = http.createServer(app);\nLoadable.preloadAll().then(function () {\n  // listen to port\n  Server.listen(app.get('port'), 'localhost', function (err) {\n    if (err) {\n      console.log(err.message); // you can output err.stack\n\n      return;\n    }\n\n    var getHostAddress = Server.address();\n    console.log(\"Web server running at http://\".concat(getHostAddress.address, \":\").concat(app.get('port'))); // console.log('App Views Dir:', app.get('views'));\n    // console.log('App Static Files Dir:', app.get('static files'));\n\n    console.log('\\npress Ctrl-C to terminate.');\n  });\n});\n\nif (module.hot) {\n  module.hot.accept();\n}\n\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(CURRENT_WORKING_DIR, \"CURRENT_WORKING_DIR\", \"C:\\\\Users\\\\Michael\\\\VSCodeProjects\\\\mern-stack-starter-pack\\\\src\\\\backend\\\\Server.js\");\n  reactHotLoader.register(app, \"app\", \"C:\\\\Users\\\\Michael\\\\VSCodeProjects\\\\mern-stack-starter-pack\\\\src\\\\backend\\\\Server.js\");\n  reactHotLoader.register(compiler, \"compiler\", \"C:\\\\Users\\\\Michael\\\\VSCodeProjects\\\\mern-stack-starter-pack\\\\src\\\\backend\\\\Server.js\");\n  reactHotLoader.register(isProduction, \"isProduction\", \"C:\\\\Users\\\\Michael\\\\VSCodeProjects\\\\mern-stack-starter-pack\\\\src\\\\backend\\\\Server.js\");\n  reactHotLoader.register(Server, \"Server\", \"C:\\\\Users\\\\Michael\\\\VSCodeProjects\\\\mern-stack-starter-pack\\\\src\\\\backend\\\\Server.js\");\n  leaveModule(module);\n})();\n\n;",null]}